package com.pin.patterndemo.behavioral.chain;

/**
 * 责任链模式（Chain of Responsibility Pattern）
 * <p>
 * 意图：避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。
 * <p>
 * 主要解决：职责链上的处理者负责处理请求，客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递，所以职责链将请求的发送者和请求的处理者解耦了。
 * <p>
 * 何时使用：在处理消息的时候以过滤很多道。
 * <p>
 * 如何解决：拦截的类都实现统一接口。
 * <p>
 * PS：多层拦截的时候使用
 * PS：个人理解：关键在于Chains类中处理拦截器的转发还是执行（Observable或者统一Request与Response结构体的链式函数调用，会大大简化dealChains的步骤）
 */

public class ChainPatternDemo {


    /**
     * 情景
     * 在公司内部员工请假一般情况是这样的：员工在OA系统中提交一封请假邮件，该邮件会自动转发到你的直接上级领导邮箱里，如果你的请假的情况特殊的话，该邮件也会转发到你上级的上级的邮箱，根据请假的情况天数多少，系统会自动转发相应的责任人的邮箱。我们就以这样一种场景为例完成一个责任链模式的代码。为了更清晰的描述这种场景我们规定如下：
     * ① GroupLeader（组长 ）：他能批准的假期为2天，如果请假天数超过2天就将请假邮件自动转发到组长和经理邮箱。
     * ② Manager（经理）：他能批准的假期为4天以内，如果请假天数大于4天将该邮件转发到自动转发到组长、经理和部门领导的邮箱。
     * ③ DepartmentHeader（部门领导）：他能批准的假期为7天以内，如果大于7天就只批准7天。
     */
    void test() {

    }
}
