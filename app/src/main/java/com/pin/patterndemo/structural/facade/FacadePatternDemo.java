package com.pin.patterndemo.structural.facade;

/**
 * 外观模式（Facade Pattern）
 * <p>
 * 意图：为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。
 * <p>
 * 主要解决：降低访问复杂系统的内部子系统时的复杂度，简化客户端与之的接口。
 * <p>
 * 何时使用： 1、客户端不需要知道系统内部的复杂联系，整个系统只需提供一个"接待员"即可。 2、定义系统的入口。
 * <p>
 * 如何解决：客户端不与系统耦合，外观类与系统耦合。
 * <p>
 * 优点： 1、减少系统相互依赖。 2、提高灵活性。 3、提高了安全性。
 * <p>
 * 缺点：不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。
 * <p>
 * 使用场景： 1、为复杂的模块或子系统提供外界访问的模块。 2、子系统相对独立。 3、预防低水平人员带来的风险。
 * <p>
 * 注意事项：在层次化结构中，可以使用外观模式定义系统中每一层的入口。
 * <p>
 * PS 个人理解:和创建模式中的建造者模式有点相似，都是多个组件进行组装封装成的对外部的类，区别在于，使用目的的不同（一个是为了创建，一个是为了提供对外部的简单操作），同时建造者模式中的组件具有可以替换的特性
 * 两者之间感觉并没有绝对的区分，可以同时共存在实际运用中（和建造者区别很大，这里持有的都是同一子类）
 */

public class FacadePatternDemo {


    /**
     * 实际上在这个Demo中将cpu 等子组件抽象成接口,computer 产品类中子组件可以替换的话，就是一个标准的Builder建造者模式
     * computer 这个类 除了是Builder模式中的Product，同时也可以抽象提出方法，成为facade模式中facade 类，作为对外的接口
     */
    void main() {
        Computer computer = new Computer();
        computer.startup();
        computer.shutdown();
    }
}
